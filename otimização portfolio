library(riskR) 
library(PerformanceAnalytics)
library(quantmod) 
library(tidyverse) 
library(tseries)
library(fBasics)
library(rugarch)
library(fGarch)
library(readxl) 

##### BAIXANDO OS DADOS DOS ATIVOS ######
getSymbols(c("GC=F", "^BVSP", "BTC-USD", 
             "^GSPC", "^IRX"), from = "2017-01-02", to = "2021-12-08", src = 'yahoo')
Gold <- `GC=F`
BTC <- `BTC-USD`

IFIX <- read_excel("IFIX.xlsx")


##### EDITANDO DADOS ####
rm(`GC=F`, `BTC-USD`)

(BVSP <-fortify.zoo(BVSP) %>% as_tibble())
(Gold <-fortify.zoo(Gold) %>% as_tibble())
(BTC <-fortify.zoo(BTC) %>% as_tibble())
(GSPC <-fortify.zoo(GSPC) %>% as_tibble())
(IRX <-fortify.zoo(IRX) %>% as_tibble())

# Selecionado variáveis 
BTC <- BTC[,c(1,7)]
BVSP <- BVSP[,c(1,7)]
Gold <- Gold[,c(1,7)]
GSPC <- GSPC[,c(1,7)]
IFIX <- IFIX[,c(1,3)]

IRX <- na.omit(IRX)

IRX <- IRX[1:1242,c(1,7)]


# Matriz de preços
prices.data <- BTC %>%
  inner_join(BVSP, by = c("Index" = "Index")) %>%
  inner_join(Gold, by = c("Index" = "Index")) %>%
  inner_join(GSPC, by = c("Index" = "Index")) %>%
  inner_join(IFIX, by = c("Index" = "DATA")) %>%
  inner_join(IRX, by = c("Index" = "Index"))

head(prices.data)
prices.data <- na.omit(prices.data)
head(prices.data)

prices.data_zoo <- read.zoo(prices.data)

##### CÁLCULOS INICIAIS ##### 

# Retorno
returns.data <- sapply(prices.data_zoo, CalculateReturns) 
returns.data <- na.omit(returns.data) #Retira os NAs
colnames(returns.data) <- c("BTC", "BVSP",  "Gold", "S&P 500", "FII", "TB")

head(returns.data)

# Média 
meanReturns <- colMeans(returns.data) #calcula retorno medio
meanReturns

# Covariância
covMat <- cov(returns.data) #calcula matriz de covariancias
covMat

#Matrix de Correlações
D <- sqrt(diag(covMat))
Dinv <- solve(diag(D))
CorrMat <- Dinv%*%covMat%*%Dinv
colnames(CorrMat) <- colnames(covMat)
rownames(CorrMat) <- rownames(covMat)
CorrMat


##### MINIMIZAÇÃO DO RISCO ####

port_ideal <- risk.port(returns.data[,1:5], alpha = 0.05)
port_ideal <- as.data.frame(port_ideal)
colnames(port_ideal) <- c("BTC", "BVSP",  "Gold", "S&P 500", "FII")

saveRDS(port_ideal, file = "port_ideal.rds")

port_ideal

##### MAXIMIZAÇÃO DO RETORNO #####

port_ideal2 <- risk.port2(returns.data[,1:5], alpha = 0.05)
port_ideal2 <- as.data.frame(port_ideal2)
colnames(port_ideal2) <- c("BTC", "BVSP",  "Gold", "S&P 500", "FII")

saveRDS(port_ideal2, file = "port_ideal2.rds")

port_ideal2

##### ESCOLHA DAS MEDIDAS DE RISCO #####

aloc_min <- port_ideal[c(1,5),] 
aloc_max <- port_ideal2[c(1,5),]

saveRDS(aloc_min, file = "aloc_min.rds")
saveRDS(aloc_max, file = "aloc_max.rds")

##### CARTEIRAS COM PESOS ESCOLHIDOS ##### 

# MINIMIZANDO RISCO
Cart_min_Std <- returns.data[,1]*aloc_min[1,1] + returns.data[,2]*aloc_min[1,2] +
                returns.data[,3]*aloc_min[1,3] + returns.data[,4]*aloc_min[1,4] +
                returns.data[,5]*aloc_min[1,5]

Cart_min_ES <- returns.data[,1]*aloc_min[2,1] + returns.data[,2]*aloc_min[2,2] +
               returns.data[,3]*aloc_min[2,3] + returns.data[,4]*aloc_min[2,4] +
               returns.data[,5]*aloc_min[2,5]

# MAXIMANDO RETORNO
Cart_max_Std <- returns.data[,1]*aloc_max[1,1] + returns.data[,2]*aloc_max[1,2] +
                returns.data[,3]*aloc_max[1,3] + returns.data[,4]*aloc_max[1,4] +
                returns.data[,5]*aloc_max[1,5]

Cart_max_ES <- returns.data[,1]*aloc_max[2,1] + returns.data[,2]*aloc_max[2,2] +
               returns.data[,3]*aloc_max[2,3] + returns.data[,4]*aloc_max[2,4] +
               returns.data[,5]*aloc_max[2,5]


##### MIN STD #####

alpha <- 0.05

n1 <- length(Cart_min_Std)
Cart_min_Std1 <- Cart_min_Std[(n1-999):n1]
N1 <- length(Cart_min_Std1)
WE <- N1/4 

Real_min_Std <- Cart_min_Std1[(WE+1):N1]

VaRHS_min_Std <- matrix(nrow = (N1 - WE), ncol=1)
colnames(VaRHS_min_Std) <- c("HS")


### Estimação do modelo Historical Simulation


for (t in (WE+1):N1) {
  
  t1 <- t - WE
  t2 <- t - 1
  
  window <- Cart_min_Std1[t1:t2]
  
  VaRHS_min_Std[t1,1] <- -quantile(window,alpha)
}


##### MIN ES  #####

n1 <- length(Cart_min_ES)
Cart_min_ES1 <- Cart_min_ES[(n1-999):n1]
N1 <- length(Cart_min_ES1)
WE <- N1/4 


Real_min_ES <- Cart_min_ES1[(WE+1):N1]

VaRHS_min_ES <- matrix(nrow = (N1 - WE), ncol=1)
colnames(VaRHS_min_ES) <- c("HS")

### Estimação do modelo Historical Simulation


for (t in (WE+1):N1) {
  
  t1 <- t - WE
  t2 <- t - 1
  
  window <- Cart_min_ES1[t1:t2]
  
  VaRHS_min_ES[t1,1] <- -quantile(window,alpha)
}


##### MAX Std  #####

n1 <- length(Cart_max_Std)
Cart_max_Std1 <- Cart_max_Std[(n1-999):n1]
N1 <- length(Cart_max_Std1)
WE <- N1/4 


Real_max_Std <- Cart_max_Std1[(WE+1):N1]

VaRHS_max_Std <- matrix(nrow = (N1 - WE), ncol=1)
colnames(VaRHS_max_Std) <- c("HS")

### Estimação do modelo Historical Simulation


for (t in (WE+1):N1) {
  
  t1 <- t - WE
  t2 <- t - 1
  
  window <- Cart_max_Std1[t1:t2]
  
  VaRHS_max_Std[t1,1] <- -quantile(window,alpha)
}

##### MAX ES  ######

n1 <- length(Cart_max_ES)
Cart_max_ES1 <- Cart_max_ES[(n1-999):n1]
N1 <- length(Cart_max_ES1)
WE <- N1/4 


Real_max_ES <- Cart_max_ES1[(WE+1):N1]

VaRHS_max_ES <- matrix(nrow = (N1 - WE), ncol=1)
colnames(VaRHS_max_ES) <- c("HS")

### Estimação do modelo Historical Simulation


for (t in (WE+1):N1) {
  
  t1 <- t - WE
  t2 <- t - 1
  
  window <- Cart_max_ES1[t1:t2]
  
  VaRHS_max_ES[t1,1] <- -quantile(window,alpha)
}



##### VOLATILIDADE HS - MIN STD #####

Var_df_min_Std <- cbind(seq(1:750), Real_min_Std, -VaRHS_min_Std)
colnames(Var_df_min_Std) <- c("Dados", "Real min Std","HS") 

Var_df_min_Std <- as.data.frame(Var_df_min_Std)

Var_df_min_Std <- Var_df_min_Std %>%
  select("Dados", "Real min Std","HS") %>%
  gather(key = "Abordagem", value = "Volatilidade", -Dados)

VaRgrafic_min_Std <- ggplot(Var_df_min_Std, aes(x = Dados, y = Volatilidade)) + 
  geom_line(aes(color = Abordagem), size = 0.40) +
  scale_color_manual(values = c(2, "Black")) +
  theme_minimal()

print(VaRgrafic_min_Std + ggtitle("Estimação VaR - min Std"))


##### VOLATILIDADE HS - MIN ES #####

Var_df_min_ES <- cbind(seq(1:750), Real_min_ES, -VaRHS_min_ES)
colnames(Var_df_min_ES) <- c("Dados", "Real min ES","HS") 

Var_df_min_ES <- as.data.frame(Var_df_min_ES)

Var_df_min_ES <- Var_df_min_ES %>%
  select("Dados", "Real min ES","HS") %>%
  gather(key = "Abordagem", value = "Volatilidade", -Dados)

VaRgrafic_min_ES <- ggplot(Var_df_min_ES, aes(x = Dados, y = Volatilidade)) + 
  geom_line(aes(color = Abordagem), size = 0.40) +
  scale_color_manual(values = c(2, "Black")) +
  theme_minimal()

print(VaRgrafic_min_ES + ggtitle("Estimação VaR - min ES"))


##### VOLATILIDADE HS - MAX Std #####

Var_df_max_Std <- cbind(seq(1:750), Real_max_Std, -VaRHS_max_Std)
colnames(Var_df_max_Std) <- c("Dados", "Real max Std","HS") 

Var_df_max_Std <- as.data.frame(Var_df_max_Std)

Var_df_max_Std <- Var_df_max_Std %>%
  select("Dados", "Real max Std","HS") %>%
  gather(key = "Abordagem", value = "Volatilidade", -Dados)

VaRgrafic_max_Std <- ggplot(Var_df_max_Std, aes(x = Dados, y = Volatilidade)) + 
  geom_line(aes(color = Abordagem), size = 0.40) +
  scale_color_manual(values = c(2, "Black")) +
  theme_minimal()

print(VaRgrafic_max_Std + ggtitle("Estimação VaR - max Std"))


##### VOLATILIDADE HS - MAX ES ######

Var_df_max_ES <- cbind(seq(1:750), Real_max_ES, -VaRHS_max_ES)
colnames(Var_df_max_ES) <- c("Dados", "Real max ES","HS") 

Var_df_max_ES <- as.data.frame(Var_df_max_ES)

Var_df_max_ES <- Var_df_max_ES %>%
  select("Dados", "Real max ES","HS") %>%
  gather(key = "Abordagem", value = "Volatilidade", -Dados)

VaRgrafic_max_ES <- ggplot(Var_df_max_ES, aes(x = Dados, y = Volatilidade)) + 
  geom_line(aes(color = Abordagem), size = 0.40) +
  scale_color_manual(values = c(2, "Black")) +
  theme_minimal()

print(VaRgrafic_max_ES + ggtitle("Estimação VaR - min ES"))


##### VaR ####

VaR_matriz <- matrix(nrow = 1, ncol = 4)
colnames(VaR_matriz) <- c("Min-Std", "Min-ES", "Max-Std", "Max-ES")
rownames(VaR_matriz) <- c("Var(0,05)")

VaR_matriz[1,1] <-  -quantile(Cart_min_Std, alpha)
VaR_matriz[1,2]  <- -quantile(Cart_min_ES, alpha) 
VaR_matriz[1,3] <-  -quantile(Cart_max_Std, alpha) 
VaR_matriz[1,4]  <- -quantile(Cart_max_ES, alpha)


saveRDS(VaR_matriz, file = "VaR_matriz.rds")

VaR_matriz

### Supondo 100k de investimentos
Var_100k <- round(VaR_matriz*100000, digits = 2)
saveRDS(Var_100k, file = "Var_100k.rds")
Var_100k
                          
##### Sharpe Ratio #####

RF <- returns.data[,6]

Sharpe_matriz <- matrix(nrow = 2 , ncol=4)
colnames(Sharpe_matriz) <- c("Min-Std", "Min-ES", "Max-Std", "Max-ES")
rownames(Sharpe_matriz) <- c("VaR Sharpe", "Information Ratio")

Sharpe_matriz[1,1] <- SharpeRatio(R=Cart_min_Std, Rf=mean(RF), p=0.99, FUN="VaR", annualize=FALSE)
Sharpe_matriz[1,2] <- SharpeRatio(R=Cart_min_ES, Rf=mean(RF), p=0.99, FUN="VaR", annualize=FALSE)
Sharpe_matriz[1,3] <- SharpeRatio(R=Cart_max_Std, Rf=mean(RF), p=0.99, FUN="VaR", annualize=FALSE)
Sharpe_matriz[1,4] <- SharpeRatio(R=Cart_max_ES, Rf=mean(RF), p=0.99, FUN="VaR", annualize=FALSE)

##### Information Ratio #####

Sharpe_matriz[2,1] <- InformationRatio(Ra = Cart_min_Std, 
                                       Rb = returns.data[,4], scale = 252)
Sharpe_matriz[2,2] <- InformationRatio(Ra = Cart_min_ES, 
                                       Rb = returns.data[,4], scale = 252)
Sharpe_matriz[2,3] <- InformationRatio(Ra = Cart_max_Std, 
                                       Rb = returns.data[,4], scale = 252)
Sharpe_matriz[2,4] <- InformationRatio(Ra = Cart_max_ES, 
                                       Rb = returns.data[,4], scale = 252)

Sharpe_matriz <- round(Sharpe_matriz, digits = 5)
saveRDS(Sharpe_matriz, file = "Sharpe_matriz.rds")
Sharpe_matriz
